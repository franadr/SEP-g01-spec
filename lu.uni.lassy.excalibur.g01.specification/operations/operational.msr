/*
* @author Adriano
* @date Mon Dec 05 16:32:52 CET 2016
*/

package lu.uni.lassy.excalibur.g01.specification.^operation {
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.excalibur.g01.specification.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.g01.specification.concepts.primarytypes.datatypes



	Operation Model {
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actVolunteer.outactVolunteer.oeGetPosition():ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)

		}
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actVolunteer.outactVolunteer.oeAcceptMission(AdtId: dtHRid):ptBoolean{
			
			preP
			{
			let System: ctState in
			let volunteer : ctVolunteer	in
			let inRangeHelpRequest : Bag(ctHelpRequest) in
				//PreP01
				and self.rnActor.rnSystem = System 
				and volunteer = System.rnActor
				and volunteer.rnInterface^oeGetMissionInRange() = true
				and inRangeHelpRequest -> size().geq(1)
				//Prep02
				and volunteer.rnctHuman.cpToken = true

			}
			
			preF
			{
				and System.HelpRequest()
				
			}
			
			postF{
				
			}
			
			postP
			{
				
			}
			
			
		}
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actVolunteer.outactVolunteer.oeGetMissionInRagne(AdtRange: dtRange, AdtPosition: dtCoordinates):ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actVolunteer.outactVolunteer.oeRegisterCoordinates(AdtPosition : dtCoordinates):ptBoolean{
			
		}
		
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actActivator.outactActivator.oeSendNotificationToVolunteer():ptBoolean{
			preP{
				let System: ctState in
				let AvpStarted: ptBoolean in
				let NotHandledHelpRequest : Bag(ctHelpRequest) in
				let FreeVolunteer : Bag(ctVolunteer) in 
				
				//PreP01
				self.rnActor.rnSystem = System 
				and System.vpStarted = AvpStarted 
				and AvpStarted = true 
				
				
				
				//Prep02
				and System.rnctHelpRequest -> select(
					System.rnctHelpRequest.HelpRequestStatus = "Not handled" 
					and System.rnctHelpRequest.priority > 2
				) 
				= NotHandledHelpRequest
				
				and System.rnctHuman.rnctVolunteer -> select(
					System.rnctHuman.rnctVolunteer.VolunteerStatus =  "Online"
				)
				= FreeVolunteer
				
				and NotHandledHelpRequest -> Size().geq(1)
				and FreeVolunteer -> Size().geq(1)
	
			}preF{
				true
			}postF{
						FreeVolunteer->forall(rnInterfaceOUT^oeSendNotification())
				
			}postP{
				
			}
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actVolunteer.outactVolunteer.oeSendNotification():ptBoolean{
			preP{
				let System: ctState in
				let AvpStarted: ptBoolean in
				let NotHandledHelpRequest : Bag(ctHelpRequest) in
				let volunteer : ctVolunteer in 
				let vCoordinates : dtCoordinates in
				let vRange : dtRange in
				let inRangeHelpRequest : Bag(ctHelpRequest) in
				
				
				//PreP01
				self.rnActor.rnSystem = System 
				and System.vpStarted = AvpStarted 
				and AvpStarted = true 
				
				//Prep02
				and volunteer =System.rnActor
				and volunteer.rnctHuman.vpToken = true
				
				//Prep03
				and volunteer.volunteerStatus = 'Online'
				
				//Prep04
				and System.rnctHelpRequest -> select(
					System.rnctHelpRequest.HelpRequestStatus = "Not handled" 
					and System.rnctHelpRequest.priority > 2
				) 
				= NotHandledHelpRequest
				and NotHandledHelpRequest -> Size().geq(1)
				
				
				and vRange = volunteer.range
				and vCoordinates = vlounteer.rnctHuman.coordinates
				and NotHandledHelpRequest -> iterate(hr : ctHelpRequest ; acc : dtHRid = 0 | NotHandledHelpRequest -> select(acc=hrid) = thisHelpRequest 
																							let hrCoordinates :  dtCoordinates = thisHelpRequest.rnctHelpRequest.rnctHuman.coordinates in
																							and volunteer.rnctHuman.isInRange (vCoordinates,vRange,hrCoordinates)
																							
				) = inRangeHelpRequest
				
				and inRangeHelpRequest -> size().geq(1)
				
				
			}
			preF{
				true
			}
			postF{
				rnInterfaceIN^ieMessage("There exists pending help request in near "+vRange+" km")
			}
			
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actActivator.outactActivator.oeSetClock(AcurrentClock: dtDateAndTime):ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actWeakPerson.outactWeakPerson.oeAlertFamily():ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeConfirmPriority(AdtRiskLevel : dtInteger, AdtHelpRequestID : dtHRid):ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeGetHelpRequestDetail(AdtHelpRequestId: dtHRid):ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeGetPendingHelpRequests(AetHelpRequestStatus : etHelpRequestStatus):ptBoolean{
			
		}
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeProceedCall(AdtPhoneNumber : dtPhoneNumber):ptBoolean{
			
		}
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeReqCheckbox():ptBoolean{
			
		}
		
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeSetRiskLevel(AdtRiskLevel : dtInteger, AdtHelpRequestID : dtHRid):ptBoolean{
			
		}
		operation: lu.uni.lassy.excalibur.g01.specification.environment.actCoordinator.outactCoordinator.oeReqCall(AdtPhoneNumber : dtPhoneNumber):ptBoolean{
			
		}
		
	}


}
