/*
* @author Adriano
* @date Sat Oct 22 12:57:25 CEST 2016
*/

package lu.uni.lassy.excalibur.g01.specification.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.excalibur.g01.specification.environment



	Use Case Model {

		use case system summary suRequestHelp() {
			
			actor actWeakPerson[primary,active]
			actor actSensor[secondary]
		
			
			
			step a: actSensor executes oeGetPositionFromSensor()
			step b : actWeakPerson executes oeInputPost()
			step c : actWeakPerson executes oeGetInfo()			
			step d : actWeakPerson executes oeAlertFamily()
			step e : actWeakPerson executes oeSendPosAndInfo()
			
			
			ordering constraint "step (a) is always the first step "
			ordering constraint "step (b) must be executed after step (a) "
			ordering constraint "step (d) may not be executed (if actWeakPerson is not signed up)"
			ordering constraint "step (e) is always the last step "			
			
		}
		
//----------------------------------------------------------------------------------
		
		//Moved to *.usecases.coordinator.msrd
		
		
//---------------------------------------------------------------------------------
		use case system usergoal oeGetPositionFromSensor() {
			actor actSensor[primary, active]
			
		}
		
		
		
		use case system subfunction oeGetInfo() {
			actor actWeakPerson[primary,active]
			
			returned messages {
				ieSendInfo() returned to actWeakPerson
			}
		}
		
		
	
		
		use case system subfunction oeInputPost() {
			actor actPositionInputActor[primary,active]
			
			returned messages {
				ieSentPosition() returned to actPositionInputActor
			}
		}
		
		use case system subfunction oeSendPosAndInfo() {
			actor actWeakPerson[primary,active]
			
			returned messages {
				ieSentConfirmationMessage() returned to actWeakPerson
			}
		}
		
	use case system usergoal ugGetMissionInRange() {
		actor actVolunteer[primary,active]
		actor actSensor[secondary]
		actor actPositionInputActor[secondary]
		
		step a: actSensor executes oeGetPositionFromSensor()
		step b : actVolunteer executes oeInputPost()
		step c : actVolunteer executes oeGetRange()
		
		}
		
		use case system subfunction oeGetRange() {
			actor actVolunteer[primary,active]
			
			returned messages {
				ieSendRange() returned to actVolunteer
				
			}
			
			
		}
	
//---------------------------------------------------------------- 
	 use case system summary suAltertAFamilyMember() {
	 	actor actWeakPerson [primary, active]
	 	actor actPhoneCompany[secondary, active]
	 	
	 	
	 	reuse suRequestHelp[1..*]
	 	reuse oeSendFamilyDetails[1..*]
	 	reuse oeGetDeliveryReport[1..*]
	 	
	 	step a: actWeakPerson executes suRequestHelp
	 	step b: actPendingHelpRequestList executes oeSendFamilyDetails
	 	step c: actPhoneCompany executes oeGetDeliveryReport
	 	
	 	
	 	 	 	
	 }
	 
	 use case system subfunction oeAlertFamily() {
	 	actor actWeakPerson[primary,active]
	 	actor actPendingHelpRequestList[secondary,passive]
	 	
	 	returned messages {
	 		ieFamilyDetailsRequest returned to actPendingHelpRequestList
	 	}
	 }
	 
	 use case system subfunction oeSendFamilyDetails() {
	 	actor actPendingHelpRequestList[primary,active]
	 	actor actPhoneCompany[secondary, passive]
	 	returned messages {
	 		ieConfirmationOfSmsSend() returned to actPendingHelpRequestList
	 		ieSmsForFamily() returned to actPhoneCompany
	 		
	 	}
	 }
	 
	 use case system subfunction oeGetDeliveryReport() {
	 	actor actPhoneCompany[primary,active]
	 	actor actPendingHelpRequestList[secondary, passive]
	 	returned messages{
	 		ieFamilyDeliveryReport() returned to actPendingHelpRequestList
	 		
	 	}
	 }




	 }
}